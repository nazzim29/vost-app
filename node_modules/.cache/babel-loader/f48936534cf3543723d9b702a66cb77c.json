{"ast":null,"code":"import ProductionService from \"@/services/ProductionService\";\n\nconst defaultState = () => ({\n  productions: []\n});\n\nconst fonctionsModule = {\n  state: defaultState(),\n  mutations: {\n    getProductions(state, productions) {\n      state.productions = productions;\n    }\n\n  },\n  actions: {\n    getProductions(context, query) {\n      return ProductionService.get(query).then(res => {\n        return context.commit(\"getProductions\", res.data);\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    },\n\n    deleteProduction(context, id) {\n      return ProductionService.destroy(id).then(() => {\n        return context.dispatch(\"getCommandes\", {});\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    },\n\n    addProduction(context, production) {\n      return ProductionService.create(production).then(() => {\n        return context.dispatch(\"getCommandes\", {});\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    },\n\n    updateProduction(context, commande) {\n      return ProductionService.update(commande).then(() => {\n        return context.dispatch(\"getCommandes\", {});\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    },\n\n    getTypeProductions(context) {\n      return ProductionService.getTypeProduction().then(res => {\n        return context.commit(\"getTypeProductions\", res.data);\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    }\n\n  },\n  getters: {\n    getProductions: state => state.productions\n  }\n};\nexport default fonctionsModule;","map":{"version":3,"sources":["C:/Users/Dell/Desktop/vost-app/src/store/productionModule.js"],"names":["ProductionService","defaultState","productions","fonctionsModule","state","mutations","getProductions","actions","context","query","get","then","res","commit","data","catch","err","dispatch","response","message","deleteProduction","id","destroy","addProduction","production","create","updateProduction","commande","update","getTypeProductions","getTypeProduction","getters"],"mappings":"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","sourcesContent":["import ProductionService from \"@/services/ProductionService\";\r\nconst defaultState = () => ({\r\n    productions: [],\r\n});\r\nconst fonctionsModule = {\r\n\tstate: defaultState(),\r\n\tmutations: {\r\n\t\tgetProductions(state, productions) {\r\n\t\t\tstate.productions = productions;\r\n\t\t},\r\n\t},\r\n\tactions: {\r\n\t\tgetProductions(context, query) {\r\n\t\t\treturn ProductionService.get(query)\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\treturn context.commit(\"getProductions\", res.data);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\tdeleteProduction(context, id) {\r\n\t\t\treturn ProductionService.destroy(id)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn context.dispatch(\"getCommandes\", {});\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\taddProduction(context, production) {\r\n\t\t\treturn ProductionService.create(production)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn context.dispatch(\"getCommandes\", {});\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\tupdateProduction(context, commande) {\r\n\t\t\treturn ProductionService.update(commande)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn context.dispatch(\"getCommandes\", {});\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\tgetTypeProductions(context) {\r\n\t\t\treturn ProductionService.getTypeProduction()\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\treturn context.commit(\"getTypeProductions\", res.data);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t},\r\n\tgetters: {\r\n\t\tgetProductions: (state) => state.productions,\r\n\t},\r\n};\r\n\r\nexport default fonctionsModule;\r\n"]},"metadata":{},"sourceType":"module"}