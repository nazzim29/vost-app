{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar fast_diff_1 = __importDefault(require(\"fast-diff\"));\n\nvar lodash_clonedeep_1 = __importDefault(require(\"lodash.clonedeep\"));\n\nvar lodash_isequal_1 = __importDefault(require(\"lodash.isequal\"));\n\nvar AttributeMap_1 = __importDefault(require(\"./AttributeMap\"));\n\nvar Op_1 = __importDefault(require(\"./Op\"));\n\nvar NULL_CHARACTER = String.fromCharCode(0); // Placeholder char for embed in diff()\n\nvar Delta =\n/** @class */\nfunction () {\n  function Delta(ops) {\n    // Assume we are given a well formed ops\n    if (Array.isArray(ops)) {\n      this.ops = ops;\n    } else if (ops != null && Array.isArray(ops.ops)) {\n      this.ops = ops.ops;\n    } else {\n      this.ops = [];\n    }\n  }\n\n  Delta.prototype.insert = function (arg, attributes) {\n    var newOp = {};\n\n    if (typeof arg === 'string' && arg.length === 0) {\n      return this;\n    }\n\n    newOp.insert = arg;\n\n    if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {\n      newOp.attributes = attributes;\n    }\n\n    return this.push(newOp);\n  };\n\n  Delta.prototype.delete = function (length) {\n    if (length <= 0) {\n      return this;\n    }\n\n    return this.push({\n      delete: length\n    });\n  };\n\n  Delta.prototype.retain = function (length, attributes) {\n    if (length <= 0) {\n      return this;\n    }\n\n    var newOp = {\n      retain: length\n    };\n\n    if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {\n      newOp.attributes = attributes;\n    }\n\n    return this.push(newOp);\n  };\n\n  Delta.prototype.push = function (newOp) {\n    var index = this.ops.length;\n    var lastOp = this.ops[index - 1];\n    newOp = lodash_clonedeep_1.default(newOp);\n\n    if (typeof lastOp === 'object') {\n      if (typeof newOp.delete === 'number' && typeof lastOp.delete === 'number') {\n        this.ops[index - 1] = {\n          delete: lastOp.delete + newOp.delete\n        };\n        return this;\n      } // Since it does not matter if we insert before or after deleting at the same index,\n      // always prefer to insert first\n\n\n      if (typeof lastOp.delete === 'number' && newOp.insert != null) {\n        index -= 1;\n        lastOp = this.ops[index - 1];\n\n        if (typeof lastOp !== 'object') {\n          this.ops.unshift(newOp);\n          return this;\n        }\n      }\n\n      if (lodash_isequal_1.default(newOp.attributes, lastOp.attributes)) {\n        if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {\n          this.ops[index - 1] = {\n            insert: lastOp.insert + newOp.insert\n          };\n\n          if (typeof newOp.attributes === 'object') {\n            this.ops[index - 1].attributes = newOp.attributes;\n          }\n\n          return this;\n        } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {\n          this.ops[index - 1] = {\n            retain: lastOp.retain + newOp.retain\n          };\n\n          if (typeof newOp.attributes === 'object') {\n            this.ops[index - 1].attributes = newOp.attributes;\n          }\n\n          return this;\n        }\n      }\n    }\n\n    if (index === this.ops.length) {\n      this.ops.push(newOp);\n    } else {\n      this.ops.splice(index, 0, newOp);\n    }\n\n    return this;\n  };\n\n  Delta.prototype.chop = function () {\n    var lastOp = this.ops[this.ops.length - 1];\n\n    if (lastOp && lastOp.retain && !lastOp.attributes) {\n      this.ops.pop();\n    }\n\n    return this;\n  };\n\n  Delta.prototype.filter = function (predicate) {\n    return this.ops.filter(predicate);\n  };\n\n  Delta.prototype.forEach = function (predicate) {\n    this.ops.forEach(predicate);\n  };\n\n  Delta.prototype.map = function (predicate) {\n    return this.ops.map(predicate);\n  };\n\n  Delta.prototype.partition = function (predicate) {\n    var passed = [];\n    var failed = [];\n    this.forEach(function (op) {\n      var target = predicate(op) ? passed : failed;\n      target.push(op);\n    });\n    return [passed, failed];\n  };\n\n  Delta.prototype.reduce = function (predicate, initialValue) {\n    return this.ops.reduce(predicate, initialValue);\n  };\n\n  Delta.prototype.changeLength = function () {\n    return this.reduce(function (length, elem) {\n      if (elem.insert) {\n        return length + Op_1.default.length(elem);\n      } else if (elem.delete) {\n        return length - elem.delete;\n      }\n\n      return length;\n    }, 0);\n  };\n\n  Delta.prototype.length = function () {\n    return this.reduce(function (length, elem) {\n      return length + Op_1.default.length(elem);\n    }, 0);\n  };\n\n  Delta.prototype.slice = function (start, end) {\n    if (start === void 0) {\n      start = 0;\n    }\n\n    if (end === void 0) {\n      end = Infinity;\n    }\n\n    var ops = [];\n    var iter = Op_1.default.iterator(this.ops);\n    var index = 0;\n\n    while (index < end && iter.hasNext()) {\n      var nextOp = void 0;\n\n      if (index < start) {\n        nextOp = iter.next(start - index);\n      } else {\n        nextOp = iter.next(end - index);\n        ops.push(nextOp);\n      }\n\n      index += Op_1.default.length(nextOp);\n    }\n\n    return new Delta(ops);\n  };\n\n  Delta.prototype.compose = function (other) {\n    var thisIter = Op_1.default.iterator(this.ops);\n    var otherIter = Op_1.default.iterator(other.ops);\n    var ops = [];\n    var firstOther = otherIter.peek();\n\n    if (firstOther != null && typeof firstOther.retain === 'number' && firstOther.attributes == null) {\n      var firstLeft = firstOther.retain;\n\n      while (thisIter.peekType() === 'insert' && thisIter.peekLength() <= firstLeft) {\n        firstLeft -= thisIter.peekLength();\n        ops.push(thisIter.next());\n      }\n\n      if (firstOther.retain - firstLeft > 0) {\n        otherIter.next(firstOther.retain - firstLeft);\n      }\n    }\n\n    var delta = new Delta(ops);\n\n    while (thisIter.hasNext() || otherIter.hasNext()) {\n      if (otherIter.peekType() === 'insert') {\n        delta.push(otherIter.next());\n      } else if (thisIter.peekType() === 'delete') {\n        delta.push(thisIter.next());\n      } else {\n        var length_1 = Math.min(thisIter.peekLength(), otherIter.peekLength());\n        var thisOp = thisIter.next(length_1);\n        var otherOp = otherIter.next(length_1);\n\n        if (typeof otherOp.retain === 'number') {\n          var newOp = {};\n\n          if (typeof thisOp.retain === 'number') {\n            newOp.retain = length_1;\n          } else {\n            newOp.insert = thisOp.insert;\n          } // Preserve null when composing with a retain, otherwise remove it for inserts\n\n\n          var attributes = AttributeMap_1.default.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');\n\n          if (attributes) {\n            newOp.attributes = attributes;\n          }\n\n          delta.push(newOp); // Optimization if rest of other is just retain\n\n          if (!otherIter.hasNext() && lodash_isequal_1.default(delta.ops[delta.ops.length - 1], newOp)) {\n            var rest = new Delta(thisIter.rest());\n            return delta.concat(rest).chop();\n          } // Other op should be delete, we could be an insert or retain\n          // Insert + delete cancels out\n\n        } else if (typeof otherOp.delete === 'number' && typeof thisOp.retain === 'number') {\n          delta.push(otherOp);\n        }\n      }\n    }\n\n    return delta.chop();\n  };\n\n  Delta.prototype.concat = function (other) {\n    var delta = new Delta(this.ops.slice());\n\n    if (other.ops.length > 0) {\n      delta.push(other.ops[0]);\n      delta.ops = delta.ops.concat(other.ops.slice(1));\n    }\n\n    return delta;\n  };\n\n  Delta.prototype.diff = function (other, cursor) {\n    if (this.ops === other.ops) {\n      return new Delta();\n    }\n\n    var strings = [this, other].map(function (delta) {\n      return delta.map(function (op) {\n        if (op.insert != null) {\n          return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;\n        }\n\n        var prep = delta === other ? 'on' : 'with';\n        throw new Error('diff() called ' + prep + ' non-document');\n      }).join('');\n    });\n    var retDelta = new Delta();\n    var diffResult = fast_diff_1.default(strings[0], strings[1], cursor);\n    var thisIter = Op_1.default.iterator(this.ops);\n    var otherIter = Op_1.default.iterator(other.ops);\n    diffResult.forEach(function (component) {\n      var length = component[1].length;\n\n      while (length > 0) {\n        var opLength = 0;\n\n        switch (component[0]) {\n          case fast_diff_1.default.INSERT:\n            opLength = Math.min(otherIter.peekLength(), length);\n            retDelta.push(otherIter.next(opLength));\n            break;\n\n          case fast_diff_1.default.DELETE:\n            opLength = Math.min(length, thisIter.peekLength());\n            thisIter.next(opLength);\n            retDelta.delete(opLength);\n            break;\n\n          case fast_diff_1.default.EQUAL:\n            opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);\n            var thisOp = thisIter.next(opLength);\n            var otherOp = otherIter.next(opLength);\n\n            if (lodash_isequal_1.default(thisOp.insert, otherOp.insert)) {\n              retDelta.retain(opLength, AttributeMap_1.default.diff(thisOp.attributes, otherOp.attributes));\n            } else {\n              retDelta.push(otherOp).delete(opLength);\n            }\n\n            break;\n        }\n\n        length -= opLength;\n      }\n    });\n    return retDelta.chop();\n  };\n\n  Delta.prototype.eachLine = function (predicate, newline) {\n    if (newline === void 0) {\n      newline = '\\n';\n    }\n\n    var iter = Op_1.default.iterator(this.ops);\n    var line = new Delta();\n    var i = 0;\n\n    while (iter.hasNext()) {\n      if (iter.peekType() !== 'insert') {\n        return;\n      }\n\n      var thisOp = iter.peek();\n      var start = Op_1.default.length(thisOp) - iter.peekLength();\n      var index = typeof thisOp.insert === 'string' ? thisOp.insert.indexOf(newline, start) - start : -1;\n\n      if (index < 0) {\n        line.push(iter.next());\n      } else if (index > 0) {\n        line.push(iter.next(index));\n      } else {\n        if (predicate(line, iter.next(1).attributes || {}, i) === false) {\n          return;\n        }\n\n        i += 1;\n        line = new Delta();\n      }\n    }\n\n    if (line.length() > 0) {\n      predicate(line, {}, i);\n    }\n  };\n\n  Delta.prototype.invert = function (base) {\n    var inverted = new Delta();\n    this.reduce(function (baseIndex, op) {\n      if (op.insert) {\n        inverted.delete(Op_1.default.length(op));\n      } else if (op.retain && op.attributes == null) {\n        inverted.retain(op.retain);\n        return baseIndex + op.retain;\n      } else if (op.delete || op.retain && op.attributes) {\n        var length_2 = op.delete || op.retain;\n        var slice = base.slice(baseIndex, baseIndex + length_2);\n        slice.forEach(function (baseOp) {\n          if (op.delete) {\n            inverted.push(baseOp);\n          } else if (op.retain && op.attributes) {\n            inverted.retain(Op_1.default.length(baseOp), AttributeMap_1.default.invert(op.attributes, baseOp.attributes));\n          }\n        });\n        return baseIndex + length_2;\n      }\n\n      return baseIndex;\n    }, 0);\n    return inverted.chop();\n  };\n\n  Delta.prototype.transform = function (arg, priority) {\n    if (priority === void 0) {\n      priority = false;\n    }\n\n    priority = !!priority;\n\n    if (typeof arg === 'number') {\n      return this.transformPosition(arg, priority);\n    }\n\n    var other = arg;\n    var thisIter = Op_1.default.iterator(this.ops);\n    var otherIter = Op_1.default.iterator(other.ops);\n    var delta = new Delta();\n\n    while (thisIter.hasNext() || otherIter.hasNext()) {\n      if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {\n        delta.retain(Op_1.default.length(thisIter.next()));\n      } else if (otherIter.peekType() === 'insert') {\n        delta.push(otherIter.next());\n      } else {\n        var length_3 = Math.min(thisIter.peekLength(), otherIter.peekLength());\n        var thisOp = thisIter.next(length_3);\n        var otherOp = otherIter.next(length_3);\n\n        if (thisOp.delete) {\n          // Our delete either makes their delete redundant or removes their retain\n          continue;\n        } else if (otherOp.delete) {\n          delta.push(otherOp);\n        } else {\n          // We retain either their retain or insert\n          delta.retain(length_3, AttributeMap_1.default.transform(thisOp.attributes, otherOp.attributes, priority));\n        }\n      }\n    }\n\n    return delta.chop();\n  };\n\n  Delta.prototype.transformPosition = function (index, priority) {\n    if (priority === void 0) {\n      priority = false;\n    }\n\n    priority = !!priority;\n    var thisIter = Op_1.default.iterator(this.ops);\n    var offset = 0;\n\n    while (thisIter.hasNext() && offset <= index) {\n      var length_4 = thisIter.peekLength();\n      var nextType = thisIter.peekType();\n      thisIter.next();\n\n      if (nextType === 'delete') {\n        index -= Math.min(length_4, index - offset);\n        continue;\n      } else if (nextType === 'insert' && (offset < index || !priority)) {\n        index += length_4;\n      }\n\n      offset += length_4;\n    }\n\n    return index;\n  };\n\n  Delta.Op = Op_1.default;\n  Delta.AttributeMap = AttributeMap_1.default;\n  return Delta;\n}();\n\nmodule.exports = Delta;","map":{"version":3,"sources":["../src/Delta.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar fast_diff_1 = __importDefault(require(\"fast-diff\"));\nvar lodash_clonedeep_1 = __importDefault(require(\"lodash.clonedeep\"));\nvar lodash_isequal_1 = __importDefault(require(\"lodash.isequal\"));\nvar AttributeMap_1 = __importDefault(require(\"./AttributeMap\"));\nvar Op_1 = __importDefault(require(\"./Op\"));\nvar NULL_CHARACTER = String.fromCharCode(0); // Placeholder char for embed in diff()\nvar Delta = /** @class */ (function () {\n    function Delta(ops) {\n        // Assume we are given a well formed ops\n        if (Array.isArray(ops)) {\n            this.ops = ops;\n        }\n        else if (ops != null && Array.isArray(ops.ops)) {\n            this.ops = ops.ops;\n        }\n        else {\n            this.ops = [];\n        }\n    }\n    Delta.prototype.insert = function (arg, attributes) {\n        var newOp = {};\n        if (typeof arg === 'string' && arg.length === 0) {\n            return this;\n        }\n        newOp.insert = arg;\n        if (attributes != null &&\n            typeof attributes === 'object' &&\n            Object.keys(attributes).length > 0) {\n            newOp.attributes = attributes;\n        }\n        return this.push(newOp);\n    };\n    Delta.prototype.delete = function (length) {\n        if (length <= 0) {\n            return this;\n        }\n        return this.push({ delete: length });\n    };\n    Delta.prototype.retain = function (length, attributes) {\n        if (length <= 0) {\n            return this;\n        }\n        var newOp = { retain: length };\n        if (attributes != null &&\n            typeof attributes === 'object' &&\n            Object.keys(attributes).length > 0) {\n            newOp.attributes = attributes;\n        }\n        return this.push(newOp);\n    };\n    Delta.prototype.push = function (newOp) {\n        var index = this.ops.length;\n        var lastOp = this.ops[index - 1];\n        newOp = lodash_clonedeep_1.default(newOp);\n        if (typeof lastOp === 'object') {\n            if (typeof newOp.delete === 'number' &&\n                typeof lastOp.delete === 'number') {\n                this.ops[index - 1] = { delete: lastOp.delete + newOp.delete };\n                return this;\n            }\n            // Since it does not matter if we insert before or after deleting at the same index,\n            // always prefer to insert first\n            if (typeof lastOp.delete === 'number' && newOp.insert != null) {\n                index -= 1;\n                lastOp = this.ops[index - 1];\n                if (typeof lastOp !== 'object') {\n                    this.ops.unshift(newOp);\n                    return this;\n                }\n            }\n            if (lodash_isequal_1.default(newOp.attributes, lastOp.attributes)) {\n                if (typeof newOp.insert === 'string' &&\n                    typeof lastOp.insert === 'string') {\n                    this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };\n                    if (typeof newOp.attributes === 'object') {\n                        this.ops[index - 1].attributes = newOp.attributes;\n                    }\n                    return this;\n                }\n                else if (typeof newOp.retain === 'number' &&\n                    typeof lastOp.retain === 'number') {\n                    this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };\n                    if (typeof newOp.attributes === 'object') {\n                        this.ops[index - 1].attributes = newOp.attributes;\n                    }\n                    return this;\n                }\n            }\n        }\n        if (index === this.ops.length) {\n            this.ops.push(newOp);\n        }\n        else {\n            this.ops.splice(index, 0, newOp);\n        }\n        return this;\n    };\n    Delta.prototype.chop = function () {\n        var lastOp = this.ops[this.ops.length - 1];\n        if (lastOp && lastOp.retain && !lastOp.attributes) {\n            this.ops.pop();\n        }\n        return this;\n    };\n    Delta.prototype.filter = function (predicate) {\n        return this.ops.filter(predicate);\n    };\n    Delta.prototype.forEach = function (predicate) {\n        this.ops.forEach(predicate);\n    };\n    Delta.prototype.map = function (predicate) {\n        return this.ops.map(predicate);\n    };\n    Delta.prototype.partition = function (predicate) {\n        var passed = [];\n        var failed = [];\n        this.forEach(function (op) {\n            var target = predicate(op) ? passed : failed;\n            target.push(op);\n        });\n        return [passed, failed];\n    };\n    Delta.prototype.reduce = function (predicate, initialValue) {\n        return this.ops.reduce(predicate, initialValue);\n    };\n    Delta.prototype.changeLength = function () {\n        return this.reduce(function (length, elem) {\n            if (elem.insert) {\n                return length + Op_1.default.length(elem);\n            }\n            else if (elem.delete) {\n                return length - elem.delete;\n            }\n            return length;\n        }, 0);\n    };\n    Delta.prototype.length = function () {\n        return this.reduce(function (length, elem) {\n            return length + Op_1.default.length(elem);\n        }, 0);\n    };\n    Delta.prototype.slice = function (start, end) {\n        if (start === void 0) { start = 0; }\n        if (end === void 0) { end = Infinity; }\n        var ops = [];\n        var iter = Op_1.default.iterator(this.ops);\n        var index = 0;\n        while (index < end && iter.hasNext()) {\n            var nextOp = void 0;\n            if (index < start) {\n                nextOp = iter.next(start - index);\n            }\n            else {\n                nextOp = iter.next(end - index);\n                ops.push(nextOp);\n            }\n            index += Op_1.default.length(nextOp);\n        }\n        return new Delta(ops);\n    };\n    Delta.prototype.compose = function (other) {\n        var thisIter = Op_1.default.iterator(this.ops);\n        var otherIter = Op_1.default.iterator(other.ops);\n        var ops = [];\n        var firstOther = otherIter.peek();\n        if (firstOther != null &&\n            typeof firstOther.retain === 'number' &&\n            firstOther.attributes == null) {\n            var firstLeft = firstOther.retain;\n            while (thisIter.peekType() === 'insert' &&\n                thisIter.peekLength() <= firstLeft) {\n                firstLeft -= thisIter.peekLength();\n                ops.push(thisIter.next());\n            }\n            if (firstOther.retain - firstLeft > 0) {\n                otherIter.next(firstOther.retain - firstLeft);\n            }\n        }\n        var delta = new Delta(ops);\n        while (thisIter.hasNext() || otherIter.hasNext()) {\n            if (otherIter.peekType() === 'insert') {\n                delta.push(otherIter.next());\n            }\n            else if (thisIter.peekType() === 'delete') {\n                delta.push(thisIter.next());\n            }\n            else {\n                var length_1 = Math.min(thisIter.peekLength(), otherIter.peekLength());\n                var thisOp = thisIter.next(length_1);\n                var otherOp = otherIter.next(length_1);\n                if (typeof otherOp.retain === 'number') {\n                    var newOp = {};\n                    if (typeof thisOp.retain === 'number') {\n                        newOp.retain = length_1;\n                    }\n                    else {\n                        newOp.insert = thisOp.insert;\n                    }\n                    // Preserve null when composing with a retain, otherwise remove it for inserts\n                    var attributes = AttributeMap_1.default.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');\n                    if (attributes) {\n                        newOp.attributes = attributes;\n                    }\n                    delta.push(newOp);\n                    // Optimization if rest of other is just retain\n                    if (!otherIter.hasNext() &&\n                        lodash_isequal_1.default(delta.ops[delta.ops.length - 1], newOp)) {\n                        var rest = new Delta(thisIter.rest());\n                        return delta.concat(rest).chop();\n                    }\n                    // Other op should be delete, we could be an insert or retain\n                    // Insert + delete cancels out\n                }\n                else if (typeof otherOp.delete === 'number' &&\n                    typeof thisOp.retain === 'number') {\n                    delta.push(otherOp);\n                }\n            }\n        }\n        return delta.chop();\n    };\n    Delta.prototype.concat = function (other) {\n        var delta = new Delta(this.ops.slice());\n        if (other.ops.length > 0) {\n            delta.push(other.ops[0]);\n            delta.ops = delta.ops.concat(other.ops.slice(1));\n        }\n        return delta;\n    };\n    Delta.prototype.diff = function (other, cursor) {\n        if (this.ops === other.ops) {\n            return new Delta();\n        }\n        var strings = [this, other].map(function (delta) {\n            return delta\n                .map(function (op) {\n                if (op.insert != null) {\n                    return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;\n                }\n                var prep = delta === other ? 'on' : 'with';\n                throw new Error('diff() called ' + prep + ' non-document');\n            })\n                .join('');\n        });\n        var retDelta = new Delta();\n        var diffResult = fast_diff_1.default(strings[0], strings[1], cursor);\n        var thisIter = Op_1.default.iterator(this.ops);\n        var otherIter = Op_1.default.iterator(other.ops);\n        diffResult.forEach(function (component) {\n            var length = component[1].length;\n            while (length > 0) {\n                var opLength = 0;\n                switch (component[0]) {\n                    case fast_diff_1.default.INSERT:\n                        opLength = Math.min(otherIter.peekLength(), length);\n                        retDelta.push(otherIter.next(opLength));\n                        break;\n                    case fast_diff_1.default.DELETE:\n                        opLength = Math.min(length, thisIter.peekLength());\n                        thisIter.next(opLength);\n                        retDelta.delete(opLength);\n                        break;\n                    case fast_diff_1.default.EQUAL:\n                        opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);\n                        var thisOp = thisIter.next(opLength);\n                        var otherOp = otherIter.next(opLength);\n                        if (lodash_isequal_1.default(thisOp.insert, otherOp.insert)) {\n                            retDelta.retain(opLength, AttributeMap_1.default.diff(thisOp.attributes, otherOp.attributes));\n                        }\n                        else {\n                            retDelta.push(otherOp).delete(opLength);\n                        }\n                        break;\n                }\n                length -= opLength;\n            }\n        });\n        return retDelta.chop();\n    };\n    Delta.prototype.eachLine = function (predicate, newline) {\n        if (newline === void 0) { newline = '\\n'; }\n        var iter = Op_1.default.iterator(this.ops);\n        var line = new Delta();\n        var i = 0;\n        while (iter.hasNext()) {\n            if (iter.peekType() !== 'insert') {\n                return;\n            }\n            var thisOp = iter.peek();\n            var start = Op_1.default.length(thisOp) - iter.peekLength();\n            var index = typeof thisOp.insert === 'string'\n                ? thisOp.insert.indexOf(newline, start) - start\n                : -1;\n            if (index < 0) {\n                line.push(iter.next());\n            }\n            else if (index > 0) {\n                line.push(iter.next(index));\n            }\n            else {\n                if (predicate(line, iter.next(1).attributes || {}, i) === false) {\n                    return;\n                }\n                i += 1;\n                line = new Delta();\n            }\n        }\n        if (line.length() > 0) {\n            predicate(line, {}, i);\n        }\n    };\n    Delta.prototype.invert = function (base) {\n        var inverted = new Delta();\n        this.reduce(function (baseIndex, op) {\n            if (op.insert) {\n                inverted.delete(Op_1.default.length(op));\n            }\n            else if (op.retain && op.attributes == null) {\n                inverted.retain(op.retain);\n                return baseIndex + op.retain;\n            }\n            else if (op.delete || (op.retain && op.attributes)) {\n                var length_2 = (op.delete || op.retain);\n                var slice = base.slice(baseIndex, baseIndex + length_2);\n                slice.forEach(function (baseOp) {\n                    if (op.delete) {\n                        inverted.push(baseOp);\n                    }\n                    else if (op.retain && op.attributes) {\n                        inverted.retain(Op_1.default.length(baseOp), AttributeMap_1.default.invert(op.attributes, baseOp.attributes));\n                    }\n                });\n                return baseIndex + length_2;\n            }\n            return baseIndex;\n        }, 0);\n        return inverted.chop();\n    };\n    Delta.prototype.transform = function (arg, priority) {\n        if (priority === void 0) { priority = false; }\n        priority = !!priority;\n        if (typeof arg === 'number') {\n            return this.transformPosition(arg, priority);\n        }\n        var other = arg;\n        var thisIter = Op_1.default.iterator(this.ops);\n        var otherIter = Op_1.default.iterator(other.ops);\n        var delta = new Delta();\n        while (thisIter.hasNext() || otherIter.hasNext()) {\n            if (thisIter.peekType() === 'insert' &&\n                (priority || otherIter.peekType() !== 'insert')) {\n                delta.retain(Op_1.default.length(thisIter.next()));\n            }\n            else if (otherIter.peekType() === 'insert') {\n                delta.push(otherIter.next());\n            }\n            else {\n                var length_3 = Math.min(thisIter.peekLength(), otherIter.peekLength());\n                var thisOp = thisIter.next(length_3);\n                var otherOp = otherIter.next(length_3);\n                if (thisOp.delete) {\n                    // Our delete either makes their delete redundant or removes their retain\n                    continue;\n                }\n                else if (otherOp.delete) {\n                    delta.push(otherOp);\n                }\n                else {\n                    // We retain either their retain or insert\n                    delta.retain(length_3, AttributeMap_1.default.transform(thisOp.attributes, otherOp.attributes, priority));\n                }\n            }\n        }\n        return delta.chop();\n    };\n    Delta.prototype.transformPosition = function (index, priority) {\n        if (priority === void 0) { priority = false; }\n        priority = !!priority;\n        var thisIter = Op_1.default.iterator(this.ops);\n        var offset = 0;\n        while (thisIter.hasNext() && offset <= index) {\n            var length_4 = thisIter.peekLength();\n            var nextType = thisIter.peekType();\n            thisIter.next();\n            if (nextType === 'delete') {\n                index -= Math.min(length_4, index - offset);\n                continue;\n            }\n            else if (nextType === 'insert' && (offset < index || !priority)) {\n                index += length_4;\n            }\n            offset += length_4;\n        }\n        return index;\n    };\n    Delta.Op = Op_1.default;\n    Delta.AttributeMap = AttributeMap_1.default;\n    return Delta;\n}());\nmodule.exports = Delta;\n//# sourceMappingURL=Delta.js.map"]},"metadata":{},"sourceType":"script"}