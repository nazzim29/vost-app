{"ast":null,"code":"import ClientService from \"@/services/ClientService\";\n\nconst defaultState = () => ({\n  clients: [],\n  client: {},\n  typeClient: [],\n  feedbacks: []\n});\n\nconst fonctionsModule = {\n  state: defaultState(),\n  mutations: {\n    getClients(state, commandes) {\n      state.commandes = commandes;\n    },\n\n    showClient(state, commande) {\n      state.commande = commande;\n    },\n\n    getTypeClients(state, typeClient) {\n      state.typeClient = typeClient;\n    },\n\n    getFeedbacks(state, feedbacks) {\n      state.feedbacks = feedbacks;\n    }\n\n  },\n  actions: {\n    getClients(context, query) {\n      return ClientService.get(query).then(res => {\n        return context.commit(\"getClients\", res.data);\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    },\n\n    showClient(context, id) {\n      return ClientService.show(id).then(res => {\n        return context.commit(\"showCommande\", res.data);\n      }).catch(err => context.dispatch(\"add-error\", err.response.data.message));\n    },\n\n    deleteClient(context, id) {\n      return ClientService.destroy(id).then(() => {\n        return context.dispatch(\"getCommandes\", {});\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    },\n\n    addClient(context, commande) {\n      return ClientService.create(commande).then(() => {\n        return context.dispatch(\"getCommandes\", {});\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    },\n\n    updateClient(context, commande) {\n      return ClientService.update(commande).then(() => {\n        return context.dispatch(\"getCommandes\", {});\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    },\n\n    getTypeClients(context) {\n      return ClientService.getTypeClient().then(res => {\n        return context.commit(\"getTypeClients\", res.data);\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    },\n\n    getFeedbacks(context, query) {\n      return ClientService.getFeedbacks(query).then(res => {\n        return context.commit(\"getFeedbacks\", res.data);\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    },\n\n    validerFeedback(context, feedback) {\n      return ClientService.updateFeedback(feedback).then(() => {\n        return context.dispatch(\"getFeedbacks\");\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    }\n\n  },\n  getters: {\n    getClients: state => state.commandes,\n    getClient: state => state.commande,\n    getTypeClients: state => state.typeClient,\n    getFeedbacks: state => state.feedbacks\n  }\n};\nexport default fonctionsModule;","map":{"version":3,"sources":["C:/Users/Dell/Desktop/vost-app/src/store/clientModule.js"],"names":["ClientService","defaultState","clients","client","typeClient","feedbacks","fonctionsModule","state","mutations","getClients","commandes","showClient","commande","getTypeClients","getFeedbacks","actions","context","query","get","then","res","commit","data","catch","err","dispatch","response","message","id","show","deleteClient","destroy","addClient","create","updateClient","update","getTypeClient","validerFeedback","feedback","updateFeedback","getters","getClient"],"mappings":"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","sourcesContent":["import ClientService from \"@/services/ClientService\";\r\nconst defaultState = () => ({\r\n    clients: [],\r\n\tclient: {},\r\n\ttypeClient: [],\r\n\tfeedbacks:[]\r\n});\r\nconst fonctionsModule = {\r\n\tstate: defaultState(),\r\n\tmutations: {\r\n\t\tgetClients(state, commandes) {\r\n\t\t\tstate.commandes = commandes;\r\n\t\t},\r\n\t\tshowClient(state, commande) {\r\n\t\t\tstate.commande = commande;\r\n\t\t},\r\n\t\tgetTypeClients(state, typeClient) {\r\n\t\t\tstate.typeClient = typeClient;\r\n\t\t},\r\n\t\tgetFeedbacks(state, feedbacks) {\r\n\t\t\tstate.feedbacks = feedbacks\r\n\t\t}\r\n\t},\r\n\tactions: {\r\n\t\tgetClients(context, query) {\r\n\t\t\treturn ClientService.get(query)\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\treturn context.commit(\"getClients\", res.data);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\tshowClient(context, id) {\r\n\t\t\treturn ClientService.show(id)\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\treturn context.commit(\"showCommande\", res.data);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) =>\r\n\t\t\t\t\tcontext.dispatch(\"add-error\", err.response.data.message)\r\n\t\t\t\t);\r\n\t\t},\r\n\t\tdeleteClient(context, id) {\r\n\t\t\treturn ClientService.destroy(id)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn context.dispatch(\"getCommandes\", {});\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\taddClient(context, commande) {\r\n\t\t\treturn ClientService.create(commande)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn context.dispatch(\"getCommandes\", {});\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\tupdateClient(context, commande) {\r\n\t\t\treturn ClientService.update(commande)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn context.dispatch(\"getCommandes\", {});\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\tgetTypeClients(context) {\r\n\t\t\treturn ClientService.getTypeClient()\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\treturn context.commit(\"getTypeClients\", res.data);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\tgetFeedbacks(context,query) {\r\n\t\t\treturn ClientService.getFeedbacks(query)\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\treturn context.commit(\"getFeedbacks\", res.data);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\tvaliderFeedback(context, feedback) {\r\n\t\t\treturn ClientService.updateFeedback(feedback)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn context.dispatch(\"getFeedbacks\");\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t}\r\n\t},\r\n\tgetters: {\r\n\t\tgetClients: (state) => state.commandes,\r\n\t\tgetClient: (state) => state.commande,\r\n\t\tgetTypeClients: (state) => state.typeClient,\r\n\t\tgetFeedbacks:(state) => state.feedbacks,\r\n\t},\r\n};\r\n\r\nexport default fonctionsModule;\r\n"]},"metadata":{},"sourceType":"module"}