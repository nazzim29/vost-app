{"ast":null,"code":"import CommandeService from \"@/services/CommandeService\";\n\nconst defaultState = () => ({\n  commandes: [],\n  commande: {}\n});\n\nconst fonctionsModule = {\n  state: defaultState(),\n  mutations: {\n    getCommandes(state, commandes) {\n      state.commandes = commandes;\n    },\n\n    showCommande(state, commande) {\n      state.commande = commande;\n    }\n\n  },\n  actions: {\n    getCommandes(context, query) {\n      return CommandeService.get(query).then(res => {\n        return context.commit(\"getCommandes\", res.data);\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    },\n\n    showCommande(context, id) {\n      if (id == \"new\") {\n        console.log(context);\n        context.commit(\"showCommande\", {\n          Client: {},\n          Produits: [],\n          User: context.getters.getCurrentUser,\n          etat: \"non EnregistrÃ©\",\n          montant: 0,\n          Payements: []\n        });\n      } else return CommandeService.show(id).then(res => {\n        return context.commit(\"showCommande\", res.data);\n      }).catch(err => context.dispatch(\"add-error\", err.response.data.message));\n    },\n\n    downloadBonDeCommande(context, id) {\n      return CommandeService.downloadBonDeCommande(id).then(res => {\n        return res;\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    },\n\n    uploadBonDeCommande(context, {\n      id,\n      formData\n    }) {\n      return CommandeService.uploadBonDeCommande(id, formData).then(() => {\n        return context.dispatch(\"showCommande\", id);\n      });\n    },\n\n    deleteCommande(context, id) {\n      return CommandeService.destroy(id).then(() => {\n        return context.dispatch(\"getCommandes\", {});\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    },\n\n    setCommande(context, commande) {\n      return context.commit(\"showCommande\", commande);\n    },\n\n    addCommande(context, commande) {\n      return CommandeService.create(commande).then(({\n        data\n      }) => {\n        console.log(data);\n        return context.commit(\"showCommande\", data);\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    },\n\n    updateCommande(context, commande) {\n      return CommandeService.update(commande).then(c => {\n        return context.commit(\"showCommande\", c);\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    },\n\n    \"commande/addProducts\"(context, {\n      commandeId,\n      product\n    }) {\n      return CommandeService.addProduit(commandeId, product).then(() => {\n        return context.dispatch(\"showCommande\", commandeId);\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    },\n\n    \"commande/updateProduit\"(context, {\n      commandeId,\n      product\n    }) {\n      return CommandeService.updateProduit(commandeId, product).then(() => {\n        return context.dispatch(\"showCommande\", commandeId);\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    },\n\n    \"commande/deleteProduit\"(context, {\n      commandeId,\n      productId\n    }) {\n      return CommandeService.deleteProduit(commandeId, productId).then(() => {\n        return context.dispatch(\"showCommande\", commandeId);\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    },\n\n    \"commande/validate\"(context, {\n      idCommande,\n      next\n    }) {\n      return CommandeService.validate(idCommande).then(() => {\n        context.dispatch(\"getCommandes\");\n        context.dispatch(\"getVentes\");\n        return next.go(-1);\n      }).catch(err => {\n        return context.dispatch(\"add-error\", err.response.data.message);\n      });\n    }\n\n  },\n  getters: {\n    getCommandes: state => state.commandes,\n    getCommande: state => state.commande\n  }\n};\nexport default fonctionsModule;","map":{"version":3,"sources":["C:/Users/Dell/Desktop/vost-app/src/store/commandeModule.js"],"names":["CommandeService","defaultState","commandes","commande","fonctionsModule","state","mutations","getCommandes","showCommande","actions","context","query","get","then","res","commit","data","catch","err","dispatch","response","message","id","console","log","Client","Produits","User","getters","getCurrentUser","etat","montant","Payements","show","downloadBonDeCommande","uploadBonDeCommande","formData","deleteCommande","destroy","setCommande","addCommande","create","updateCommande","update","c","commandeId","product","addProduit","updateProduit","productId","deleteProduit","idCommande","next","validate","go","getCommande"],"mappings":"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","sourcesContent":["import CommandeService from \"@/services/CommandeService\";\r\nconst defaultState = () => ({\r\n\tcommandes: [],\r\n\tcommande: {},\r\n});\r\nconst fonctionsModule = {\r\n\tstate: defaultState(),\r\n\tmutations: {\r\n\t\tgetCommandes(state, commandes) {\r\n\t\t\tstate.commandes = commandes;\r\n\t\t},\r\n\t\tshowCommande(state, commande) {\r\n\t\t\tstate.commande = commande;\r\n\t\t},\r\n\t},\r\n\tactions: {\r\n\t\tgetCommandes(context, query) {\r\n\t\t\treturn CommandeService.get(query)\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\treturn context.commit(\"getCommandes\", res.data);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\tshowCommande(context, id) {\r\n\t\t\tif (id == \"new\") {\r\n\t\t\t\tconsole.log(context);\r\n\t\t\t\tcontext.commit(\"showCommande\", {\r\n\t\t\t\t\tClient: {},\r\n\t\t\t\t\tProduits: [],\r\n\t\t\t\t\tUser: context.getters.getCurrentUser,\r\n\t\t\t\t\tetat: \"non EnregistrÃ©\",\r\n\t\t\t\t\tmontant: 0,\r\n\t\t\t\t\tPayements: [],\r\n\t\t\t\t});\r\n\t\t\t} else\r\n\t\t\t\treturn CommandeService.show(id)\r\n\t\t\t\t\t.then((res) => {\r\n\t\t\t\t\t\treturn context.commit(\"showCommande\", res.data);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch((err) =>\r\n\t\t\t\t\t\tcontext.dispatch(\"add-error\", err.response.data.message)\r\n\t\t\t\t\t);\r\n\t\t},\r\n\t\tdownloadBonDeCommande(context, id) {\r\n\t\t\treturn CommandeService.downloadBonDeCommande(id)\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\treturn res;\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t})\r\n\t\t},\r\n\t\tuploadBonDeCommande(context, { id, formData }) {\r\n\t\t\treturn CommandeService.uploadBonDeCommande(id, formData).then(() => {\r\n\t\t\t\treturn context.dispatch(\"showCommande\", id);\r\n\t\t\t})\r\n\t\t},\r\n\t\tdeleteCommande(context, id) {\r\n\t\t\treturn CommandeService.destroy(id)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn context.dispatch(\"getCommandes\", {});\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\tsetCommande(context, commande) {\r\n\t\t\treturn context.commit(\"showCommande\", commande);\r\n\t\t},\r\n\t\taddCommande(context, commande) {\r\n\t\t\treturn CommandeService.create(commande)\r\n\t\t\t\t.then(({ data }) => {\r\n\t\t\t\t\tconsole.log(data)\r\n\t\t\t\t\treturn context.commit(\"showCommande\", data);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\tupdateCommande(context, commande) {\r\n\t\t\treturn CommandeService.update(commande)\r\n\t\t\t\t.then((c) => {\r\n\t\t\t\t\treturn context.commit(\"showCommande\", c);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\t\"commande/addProducts\"(context, { commandeId, product }) {\r\n\t\t\treturn CommandeService.addProduit(commandeId, product)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn context.dispatch(\"showCommande\", commandeId);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\t\"commande/updateProduit\"(context, { commandeId, product }) {\r\n\t\t\treturn CommandeService.updateProduit(commandeId, product)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn context.dispatch(\"showCommande\", commandeId);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\t\"commande/deleteProduit\"(context, { commandeId, productId }) {\r\n\t\t\treturn CommandeService.deleteProduit(commandeId, productId)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn context.dispatch(\"showCommande\", commandeId);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\t\"commande/validate\"(context, { idCommande, next }) {\r\n\t\t\treturn CommandeService.validate(idCommande)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tcontext.dispatch(\"getCommandes\");\r\n\t\t\t\t\tcontext.dispatch(\"getVentes\");\r\n\t\t\t\t\treturn next.go(-1);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\treturn context.dispatch(\"add-error\", err.response.data.message);\r\n\t\t\t\t});\r\n\t\t},\r\n\t},\r\n\tgetters: {\r\n\t\tgetCommandes: (state) => state.commandes,\r\n\t\tgetCommande: (state) => state.commande,\r\n\t},\r\n};\r\n\r\nexport default fonctionsModule;\r\n"]},"metadata":{},"sourceType":"module"}